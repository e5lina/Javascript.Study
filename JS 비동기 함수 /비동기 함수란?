# 비동기 함수와 비동기 처리

Javascript는 Single Thread기반 언어입니다. 즉, **한 번에 하나의 작업만 수행이 가능**하다는 의미입니다.  그런데 여러 경우에서 동시에 병렬로 처리해야하는 작업들이 있습니다. 그 상황에서 **특정 로직의 실행이 끝날 때까지 기다려주지 않고 나머지 코드를 먼저 실행하는 것이 비동기 처리입니다.** 자바스크립트에서 비동기 처리가 필요한 이유를 생각해보면, 화면에서 서버로 데이터를 요청했을 때 서버가 언제 그 요청에 대한 응답을 줄지도 모르는데 마냥 다른 코드를 실행 안 하고 기다릴 순 없기 때문입니다.

비동기를 배울 때 가장 많이 사용하는 함수인 `setTimeout`이라던지, `ajax`, 또는 `Promise`객체를 반환함으로써 직접 비동기 함수를 만들 수도 있습니다.

- setTimeout
    - 일정 시간 후에 함수를 실행
    - ***• 매개변수(parameter)***: 실행할 콜백 함수, 콜백 함수 실행 전 기다려야 할 시간 (밀리초)
    
    ```jsx
    setTimeout(function () {
      console.log('1초 후 실행');
    }, 1000);
    // 123
    ```
    
- clearTimeout
    - `setTimeout` 타이머를 종료
    
    ```jsx
    const timer = setTimeout(function () {
      console.log('10초 후 실행');
    }, 10000);
    clearTimeout(timer);
    ```
    
- 비동기 처리 예시
    
    ```jsx
    const printString = (string) => {
      setTimeout(function () {
        console.log(string);
      }, Math.floor(Math.random() * 100) + 1);
    };
    
    const printAll = () => {
      printString('james');
      printString('harry');
      printString('sam');
    };
    
    printAll();
    
    //비동기 코드는 순서를 보장할 수 없습니다.
    //순서가 계속 바뀌어서 출력됨
    //이런 비동기 코드를 제어하기 위해 Callback 함수를 사용
    //비동기를 동기화한다 (중요!)
    ```
